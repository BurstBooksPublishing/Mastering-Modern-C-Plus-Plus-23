#include <iostream>
#include <thread>
#include <vector>
#include <atomic>
#include <chrono>

void threadFunction(int id, std::atomic<int>& done) {
    std::this_thread::sleep_for(std::chrono::seconds(1));
    std::cout << "Thread " << id << " is executing.\n";
    ++done;
}

int main() {
    constexpr int num_threads = 2;
    std::vector<std::thread> threads;
    std::atomic<int> done{0};

    threads.reserve(num_threads);
    for (int i = 1; i <= num_threads; ++i)
        threads.emplace_back(threadFunction, i, std::ref(done));

    for (auto& t : threads)
        if (t.joinable()) t.join();

    std::cout << "All " << done << " threads finished. Main thread continues.\n";
    return 0;
}