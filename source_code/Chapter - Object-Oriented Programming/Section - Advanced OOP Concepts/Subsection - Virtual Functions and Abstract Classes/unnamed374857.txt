#include <iostream>
#include <memory>

class Base {
public:
    virtual ~Base() = default;               // Polymorphic base needs virtual dtor
    virtual void show() const {              // Mark const if method does not mutate
        std::cout << "Base class show function\n";
    }
};

class Derived : public Base {
public:
    void show() const override {             // override ensures correct signature
        std::cout << "Derived class show function\n";
    }
};

int main() {
    std::unique_ptr<Base> obj = std::make_unique<Derived>();
    obj->show();                             // Demonstrates dynamic dispatch
}