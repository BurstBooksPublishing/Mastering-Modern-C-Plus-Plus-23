#include <filesystem>
#include <fstream>
#include <functional>
#include <iostream>
#include <string>
#include <string_view>
#include <unordered_map>
#include <vector>
#include <format>
#include <exception>

using CmdHandler = std::function<int(const std::vector<std::string>&)>;

std::vector<std::string> parse_args(int argc, char* argv[]) {
    std::vector<std::string> tokens;
    tokens.reserve(static_cast<size_t>(std::max(0, argc - 1)));
    for (int i = 1; i < argc; ++i) tokens.emplace_back(argv[i]);
    return tokens;
}

struct Logger {
    std::ofstream out;
    explicit Logger(const std::filesystem::path& p) : out(p, std::ios::app) {
        if (!out) throw std::runtime_error("cannot open log file");
    }
    void info(std::string_view msg) { out << msg << '\n'; }
};

int cmd_version(const std::vector<std::string>&) {
    std::cout << "toolname 0.1.0\n";
    return 0;
}

int cmd_analyze(const std::vector<std::string>& args) {
    if (args.empty()) {
        std::cerr << "analyze: missing path\n";
        return 2;
    }
    const std::filesystem::path p = args.front();
    if (!std::filesystem::exists(p)) {
        std::cerr << std::format("analyze: path '{}' not found\n", p.string());
        return 3;
    }
    std::ifstream in(p, std::ios::binary);
    if (!in) return 4;
    std::size_t bytes = 0;
    char buf[4096];
    while (in.read(buf, sizeof(buf)) || in.gcount()) bytes += static_cast<size_t>(in.gcount());
    std::cout << std::format("analyze: {} bytes\n", bytes);
    return 0;
}

int main(int argc, char* argv[]) {
    try {
        const auto tokens = parse_args(argc, argv);
        Logger log("tool.log");
        const std::unordered_map<std::string, CmdHandler> dispatch{
            {"version", cmd_version},
            {"analyze", cmd_analyze},
        };
        if (tokens.empty()) {
            std::cout << "usage: tool <command> [args...]\n";
            return 1;
        }
        const std::string cmd = tokens.front();
        const std::vector<std::string> cmd_args(tokens.begin() + 1, tokens.end());
        const auto it = dispatch.find(cmd);
        if (it == dispatch.end()) {
            std::cerr << std::format("unknown command '{}'\n", cmd);
            return 64;
        }
        log.info(std::format("dispatching command '{}'", cmd));
        return it->second(cmd_args);
    } catch (const std::exception& ex) {
        std::cerr << "fatal: " << ex.what() << '\n';
        return 70;
    }
}