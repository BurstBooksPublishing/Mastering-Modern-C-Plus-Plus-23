#include <algorithm>
#include <chrono>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <stdexcept>
#include <string>
#include <utility>
#include <vector>
#include <ranges>

struct Reading {
    std::chrono::milliseconds ts;
    double value;
};

int main() {
    const std::vector<Reading> readings{
        {std::chrono::milliseconds{1620000000000}, 0.01},
        {std::chrono::milliseconds{1620000001000}, 1.2},
        {std::chrono::milliseconds{1620000002000}, 0.05},
        {std::chrono::milliseconds{1620000003000}, 2.4},
        {std::chrono::milliseconds{1620000004000}, -0.02},
        {std::chrono::milliseconds{1620000005000}, 3.1}
    };

    constexpr double noise_floor   = 0.1;
    constexpr double scale_factor  = 100.0;
    constexpr std::size_t max_take = 3;

    auto pipeline = readings
        | std::views::filter([](const Reading& r) noexcept {
              return std::abs(r.value) >= noise_floor;
          })
        | std::views::transform([](const Reading& r) noexcept {
              return std::pair{r.ts.count(), r.value * scale_factor};
          })
        | std::views::take(max_take);

    const std::vector<std::pair<long long, double>> processed{
        std::ranges::begin(pipeline), std::ranges::end(pipeline)
    };

    for (const auto& [ts, val] : processed) {
        std::cout << ts << " : " << std::fixed << std::setprecision(2) << val << '\n';
    }
}