#include <algorithm>
#include <iostream>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> v{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

    // 1) Indexed loop
    long sum_index = 0;
    for (std::size_t i = 0; i < v.size(); ++i) {
        sum_index += v[i];
    }
    std::cout << "sum_index = " << sum_index << '\n';

    // 2) Range-based loop
    long sum_range = 0;
    for (const auto& elem : v) {
        sum_range += elem;
    }
    std::cout << "sum_range = " << sum_range << '\n';

    // 3) Erase-remove idiom (C++20)
    std::erase_if(v, [](int x) { return x % 2 != 0; });
    std::cout << "after erase_if, size = " << v.size() << '\n';

    // 4) Fibonacci sequence
    int a = 0, b = 1;
    std::cout << "Fibonacci up to < 100: ";
    while (b < 100) {
        std::cout << b << ' ';
        int next = a + b;
        a = b;
        b = next;
    }
    std::cout << '\n';

    // 5) Halving steps
    int n = 100;
    int halves = 0;
    do {
        n = (n + 1) / 2;
        ++halves;
    } while (n > 1);
    std::cout << "halving steps needed = " << halves << '\n';

    return 0;
}