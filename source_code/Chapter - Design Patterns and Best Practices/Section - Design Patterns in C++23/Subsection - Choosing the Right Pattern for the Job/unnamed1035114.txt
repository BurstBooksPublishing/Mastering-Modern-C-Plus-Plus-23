#include <iostream>
#include <memory>
#include <vector>

class Observer {
public:
    virtual ~Observer() = default;
    virtual void update(int value) = 0;
};

class Subject {
    std::vector<std::weak_ptr<Observer>> observers_;
    int state_{0};
public:
    void attach(std::weak_ptr<Observer> observer) {
        observers_.push_back(std::move(observer));
    }
    void setState(int value) {
        state_ = value;
        notify();
    }
    int state() const { return state_; }
private:
    void notify() {
        for (auto it = observers_.begin(); it != observers_.end();) {
            if (auto obs = it->lock()) {
                obs->update(state_);
                ++it;
            } else {
                it = observers_.erase(it); // auto-remove expired observers
            }
        }
    }
};

class ConcreteObserver : public Observer, public std::enable_shared_from_this<ConcreteObserver> {
    int id_;
public:
    explicit ConcreteObserver(int id) : id_(id) {}
    void update(int value) override {
        std::cout << "Observer " << id_ << " updated with value " << value << '\n';
    }
};

int main() {
    Subject subject;
    auto obs1 = std::make_shared<ConcreteObserver>(1);
    auto obs2 = std::make_shared<ConcreteObserver>(2);
    subject.attach(obs1);
    subject.attach(obs2);
    subject.setState(10);
}