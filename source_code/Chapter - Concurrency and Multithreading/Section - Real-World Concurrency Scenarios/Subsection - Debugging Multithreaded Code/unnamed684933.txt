#include <atomic>
#include <iostream>
#include <thread>
#include <vector>

std::atomic<int> counter{0};

void increment(std::size_t iterations) {
    for (std::size_t i = 0; i < iterations; ++i) {
        ++counter;
    }
}

int main() {
    constexpr std::size_t kIterations = 1'000'000;
    constexpr std::size_t kThreads = 4;

    std::vector<std::thread> threads;
    threads.reserve(kThreads);

    for (std::size_t i = 0; i < kThreads; ++i) {
        threads.emplace_back(increment, kIterations);
    }

    for (auto& t : threads) {
        t.join();
    }

    std::cout << "Counter: " << counter << '\n';
    return 0;
}