#include <chrono>
#include <condition_variable>
#include <iostream>
#include <mutex>
#include <thread>
#include <vector>

std::mutex mtx;
std::condition_variable cv;
bool ready = false;

void worker_thread(int id) {
    std::unique_lock<std::mutex> lock(mtx);
    cv.wait(lock, [] { return ready; });          // Block until main sets ready
    std::cout << "Thread " << id << " processing\n";
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
}

int main() {
    std::vector<std::thread> threads;
    for (int i = 0; i < 5; ++i)
        threads.emplace_back(worker_thread, i);

    std::this_thread::sleep_for(std::chrono::milliseconds(500)); // Simulate prep

    {
        std::lock_guard<std::mutex> lock(mtx);
        ready = true;
    }
    cv.notify_all();

    for (auto& t : threads) t.join();
    std::cout << "All threads completed.\n";
    return 0;
}