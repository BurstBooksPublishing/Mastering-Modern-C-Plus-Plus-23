#include <type_traits>
#include <limits>

// Computes n! at compile-time.
// Precondition: 0 <= n <= 20 (fits in 64-bit)
constexpr std::uint64_t factorial(unsigned int n) noexcept {
    return (n <= 1) ? 1 : n * factorial(n - 1);
}

int main() {
    static_assert(factorial(5) == 120, "Factorial(5) must be 120");
    static_assert(factorial(0) == 1,  "Factorial(0) must be 1");
    static_assert(factorial(20) == 2'432'902'008'176'640'000ULL,
                  "Factorial(20) overflow check");
    return 0;
}