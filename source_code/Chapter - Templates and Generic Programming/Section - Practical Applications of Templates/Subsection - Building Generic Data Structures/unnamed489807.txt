#include <functional>
#include <memory>

template <typename T>
class BinarySearchTree {
private:
    struct Node {
        T data;
        std::unique_ptr<Node> left;
        std::unique_ptr<Node> right;
        explicit Node(const T& data) : data(data), left(nullptr), right(nullptr) {}
    };

    std::unique_ptr<Node> root;

    void insert(std::unique_ptr<Node>& node, const T& value) {
        if (!node) {
            node = std::make_unique<Node>(value);
        } else if (value < node->data) {
            insert(node->left, value);
        } else if (value > node->data) {
            insert(node->right, value);
        }
    }

    void inorder(const Node* node, const std::function<void(const T&)>& visit) const {
        if (!node) return;
        inorder(node->left.get(), visit);
        visit(node->data);
        inorder(node->right.get(), visit);
    }

public:
    BinarySearchTree() = default;

    void insert(const T& value) {
        insert(root, value);
    }

    void inorder(const std::function<void(const T&)>& visit) const {
        inorder(root.get(), visit);
    }
};