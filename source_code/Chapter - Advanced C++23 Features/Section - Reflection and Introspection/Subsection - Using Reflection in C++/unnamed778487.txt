#include <iostream>
#include <string>
#include <tuple>
#include <typeinfo>

// Reflectable aggregate
struct MyStruct {
    int x;
    double y;
    std::string z;
};

// Reflection machinery for aggregates with public non-static data members
template <typename T>
struct reflect;

template <>
struct reflect<MyStruct> {
    static constexpr std::size_t size = 3;

    template <typename F>
    static void for_each(F&& f) {
        f("x", &MyStruct::x);
        f("y", &MyStruct::y);
        f("z", &MyStruct::z);
    }
};

int main() {
    std::cout << "Number of members in MyStruct: "
              << reflect<MyStruct>::size << '\n';

    reflect<MyStruct>::for_each([](const char* name, auto member) {
        std::cout << "Member name: " << name
                  << ", Type: " << typeid(
                         std::remove_pointer_t<decltype(member)>).name()
                  << '\n';
    });
}