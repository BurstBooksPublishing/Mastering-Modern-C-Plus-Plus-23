#include <atomic>
#include <iostream>
#include <mutex>
#include <thread>
#include <vector>

std::mutex cout_mtx;               // protects std::cout
std::atomic<int> sharedCounter{0}; // shared counter

void workerFunction(int id) {
    for (int i = 0; i < 1000; ++i) {
        ++sharedCounter; // atomic increment
        {
            std::lock_guard<std::mutex> lock(cout_mtx);
            std::cout << "Thread " << id << " incremented counter to "
                      << sharedCounter << '\n';
        }
    }
}

int main() {
    constexpr int numThreads = 4;
    std::vector<std::thread> threads;
    threads.reserve(numThreads);

    for (int i = 0; i < numThreads; ++i)
        threads.emplace_back(workerFunction, i);

    for (auto& t : threads)
        t.join();

    std::cout << "Final counter value: " << sharedCounter << '\n';
    return 0;
}