#include <iostream>
#include <mutex>
#include <thread>
#include <vector>

std::mutex mtx1, mtx2;
int shared_data1 = 0;
int shared_data2 = 0;

void increment(std::size_t times) {
    for (std::size_t i = 0; i < times; ++i) {
        std::unique_lock lock1(mtx1, std::defer_lock);
        std::unique_lock lock2(mtx2, std::defer_lock);
        std::lock(lock1, lock2);          // deadlock-free acquisition
        ++shared_data1;
        ++shared_data2;
    }
}

int main() {
    constexpr std::size_t kThreads = 4;
    constexpr std::size_t kIncrementsPerThread = 100'000;

    std::vector<std::thread> pool;
    pool.reserve(kThreads);
    for (std::size_t i = 0; i < kThreads; ++i)
        pool.emplace_back(increment, kIncrementsPerThread);

    for (auto& t : pool) t.join();

    std::cout << "Shared data1: " << shared_data1
              << ", Shared data2: " << shared_data2 << '\n';
    return 0;
}