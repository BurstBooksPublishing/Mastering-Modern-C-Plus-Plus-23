#include <iostream>
#include <fstream>
#include <mutex>
#include <string>

class Logger {
public:
    enum class Level { Info, Warning, Error };

    explicit Logger(const std::string& filePath = "") : filePath_(filePath) {}

    void log(Level level, const std::string& message) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::string formatted = format(level, message);
        std::cout << formatted << std::endl;
        if (!filePath_.empty()) {
            std::ofstream ofs(filePath_, std::ios::app);
            if (ofs) ofs << formatted << '\n';
        }
    }

private:
    std::string filePath_;
    std::mutex mtx_;

    static std::string format(Level level, const std::string& msg) {
        const char* prefix = "";
        switch (level) {
            case Level::Info:    prefix = "[INFO] ";    break;
            case Level::Warning: prefix = "[WARNING] "; break;
            case Level::Error:   prefix = "[ERROR] ";   break;
        }
        return std::string(prefix) + msg;
    }
};