#include <iostream>
#include <vector>
#include <string>
#include <stdexcept>

// Minimal argument parser: returns map<flag, value>
std::vector<std::string> parseArgs(int argc, char* argv[]) {
    if (argc < 2) throw std::invalid_argument("No arguments provided");
    return {argv, argv + argc};
}

// Core processing stub
bool process(const std::string& in, const std::string& out) {
    return !in.empty() && !out.empty();
}

// Unit test harness
void runTests() {
    const std::vector<std::string> args = {"tool_name", "--input", "data.txt", "--output", "result.txt"};
    if (args.size() != 5) throw std::runtime_error("Argument count mismatch");
    if (args[1] != "--input" || args[3] != "--output") throw std::runtime_error("Flag mismatch");
    if (!process(args[2], args[4])) throw std::runtime_error("Processing failed");
    std::cout << "All tests passed.\n";
}

int main(int argc, char* argv[]) {
    try {
        if (argc == 1) { runTests(); return 0; }
        auto args = parseArgs(argc, argv);
        if (args.size() != 5 || args[1] != "--input" || args[3] != "--output")
            throw std::invalid_argument("Usage: tool --input <file> --output <file>");
        if (!process(args[2], args[4])) throw std::runtime_error("Processing error");
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << '\n';
        return 1;
    }
    return 0;
}