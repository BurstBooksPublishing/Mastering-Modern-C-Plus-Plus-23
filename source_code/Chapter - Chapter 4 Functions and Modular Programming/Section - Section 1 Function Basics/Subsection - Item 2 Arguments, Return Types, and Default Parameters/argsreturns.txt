#include <string>
#include <vector>
#include <iostream>
#include <stdexcept>

struct Color {
    int r{}, g{}, b{};
};

class BigMatrix {
public:
    explicit BigMatrix(std::size_t n) : data_(n * n) {}
    const std::vector<double>& data() const noexcept { return data_; }
    std::size_t size() const noexcept { return data_.empty() ? 0 : static_cast<std::size_t>(std::sqrt(data_.size())); }

private:
    std::vector<double> data_;
};

std::string makeLabel(std::string name, Color color = {255, 255, 255});

std::string makeLabel(std::string name, Color color) {
    name += " (" + std::to_string(color.r) + "," +
                   std::to_string(color.g) + "," +
                   std::to_string(color.b) + ")";
    return name;
}

double computeTrace(const BigMatrix& m) {
    const auto n = m.size();
    if (n == 0) return 0.0;

    double sum = 0.0;
    const auto& d = m.data();
    for (std::size_t i = 0; i < n; ++i) sum += d[i * n + i];
    return sum;
}

int main() {
    std::string s = "Node";
    std::cout << makeLabel(s) << '\n';
    std::cout << makeLabel(std::move(s), Color{128, 0, 128}) << '\n';

    BigMatrix M(100);
    std::cout << "trace: " << computeTrace(M) << '\n';
}