#include <mutex>
#include <thread>
#include <chrono>

std::mutex mtx1, mtx2;

void thread1() {
    // Acquire both locks in a fixed order to prevent deadlock
    std::scoped_lock lock(mtx1, mtx2);
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
}

void thread2() {
    // Same lock order as thread1
    std::scoped_lock lock(mtx1, mtx2);
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
}

int main() {
    std::thread t1(thread1);
    std::thread t2(thread2);
    t1.join();
    t2.join();
}