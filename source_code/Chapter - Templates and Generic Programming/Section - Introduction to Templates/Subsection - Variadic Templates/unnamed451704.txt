#include <type_traits>
#include <utility>

template <typename... Ts>
class Tuple;

template <typename Head, typename... Tail>
class Tuple<Head, Tail...> {
public:
    Head value;
    Tuple<Tail...> tail;

    constexpr Tuple() = default;

    template <typename U, typename... Us,
              std::enable_if_t<(sizeof...(Tail) == sizeof...(Us)), int> = 0>
    constexpr Tuple(U&& head, Us&&... rest)
        : value(std::forward<U>(head)), tail(std::forward<Us>(rest)...) {}
};

template <>
class Tuple<> {};