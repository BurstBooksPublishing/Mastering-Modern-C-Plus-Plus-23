#include <atomic>
#include <iostream>
#include <thread>

std::atomic<bool> flag{false};
int data = 0;

void writer() {
    data = 42;
    // Ensure all writes before the fence are visible after the flag is set
    std::atomic_thread_fence(std::memory_order_release);
    flag.store(true, std::memory_order_relaxed);
}

void reader() {
    while (!flag.load(std::memory_order_relaxed)) {
        // Spin until flag is true
    }
    // Ensure all writes from the writer are visible after the flag is observed
    std::atomic_thread_fence(std::memory_order_acquire);
    std::cout << "Data: " << data << '\n';
}

int main() {
    std::thread t1(writer);
    std::thread t2(reader);
    t1.join();
    t2.join();
}