#include <memory>
#include <vector>
#include <stdexcept>
#include <cmath>

class Shape {
public:
    virtual ~Shape() = default;
    virtual double area() const noexcept = 0;
};

class Circle final : public Shape {
public:
    explicit Circle(double r) {
        if (r <= 0.0) throw std::invalid_argument("radius must be positive");
        radius_ = r;
    }
    double area() const noexcept override { return M_PI * radius_ * radius_; }

private:
    double radius_;
};

class Rectangle final : public Shape {
public:
    Rectangle(double w, double h) {
        if (w <= 0.0 || h <= 0.0) throw std::invalid_argument("width and height must be positive");
        width_ = w;
        height_ = h;
    }
    double area() const noexcept override { return width_ * height_; }

private:
    double width_;
    double height_;
};