#include <iostream>
#include <mutex>
#include <thread>
#include <vector>

std::mutex mtx;

void task(int id) {
    std::lock_guard<std::mutex> lock(mtx);          // exclusive access
    std::cout << "Thread " << id << " is executing.\n";
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    std::cout << "Thread " << id << " has finished.\n";
}

int main() {
    constexpr std::size_t num_threads = 5;
    std::vector<std::thread> threads;
    threads.reserve(num_threads);

    for (int i = 0; i < num_threads; ++i)
        threads.emplace_back(task, i);

    for (auto& t : threads)
        t.join();

    std::cout << "All threads have completed.\n";
    return 0;
}