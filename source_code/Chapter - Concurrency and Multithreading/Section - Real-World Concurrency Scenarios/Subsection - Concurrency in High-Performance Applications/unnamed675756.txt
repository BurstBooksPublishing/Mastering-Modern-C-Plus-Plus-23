#include <atomic>
#include <thread>
#include <vector>

class Counter {
public:
    void increment() noexcept {
        count.fetch_add(1, std::memory_order_relaxed);
    }

    [[nodiscard]] int get() const noexcept {
        return count.load(std::memory_order_relaxed);
    }

private:
    alignas(64) std::atomic<int> count{0};   // prevent false sharing
};

void worker(Counter& counter) {
    for (int i = 0; i < 1000; ++i) {
        counter.increment();
    }
}