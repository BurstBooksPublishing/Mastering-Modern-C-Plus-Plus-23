#include <cstddef>
#include <utility>

class Resource {
public:
    explicit Resource(std::size_t size = 100) : data_(new int[size]), size_(size) {}

    // Rule-of-five: move-only resource wrapper
    Resource(const Resource&)            = delete;
    Resource& operator=(const Resource&) = delete;

    Resource(Resource&& other) noexcept : data_(std::exchange(other.data_, nullptr)),
                                          size_(std::exchange(other.size_, 0)) {}

    Resource& operator=(Resource&& other) noexcept {
        if (this != &other) {
            delete[] data_;
            data_ = std::exchange(other.data_, nullptr);
            size_ = std::exchange(other.size_, 0);
        }
        return *this;
    }

    ~Resource() { delete[] data_; }

    int*       get()       noexcept { return data_; }
    const int* get() const noexcept { return data_; }
    std::size_t size() const noexcept { return size_; }

private:
    int*        data_;
    std::size_t size_;
};