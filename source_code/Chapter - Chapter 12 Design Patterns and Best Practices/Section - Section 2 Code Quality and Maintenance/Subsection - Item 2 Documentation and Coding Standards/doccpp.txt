#include <chrono>
#include <functional>
#include <iostream>
#include <iomanip>
#include <string>
#include <thread>

class ScopeTimer {
public:
    using Clock = std::chrono::steady_clock;
    using Callback = std::function<void(const std::string&, double)>;

    explicit ScopeTimer(std::string name, Callback cb = {}) noexcept
        : name_(std::move(name)), cb_(std::move(cb)), start_(Clock::now()) {}

    ~ScopeTimer() noexcept {
        try {
            const auto elapsed = std::chrono::duration<double, std::milli>(Clock::now() - start_).count();
            if (cb_) cb_(name_, elapsed);
        } catch (...) {} // never propagate
    }

    ScopeTimer(const ScopeTimer&)            = delete;
    ScopeTimer& operator=(const ScopeTimer&) = delete;
    ScopeTimer(ScopeTimer&&)                 = default;
    ScopeTimer& operator=(ScopeTimer&&)      = default;

private:
    std::string name_;
    Callback    cb_;
    Clock::time_point start_;
};

int main() {
    ScopeTimer timer("busy-loop", [](const std::string& name, double ms) {
        std::cout << std::fixed << std::setprecision(3)
                  << name << " took " << ms << " ms\n";
    });

    std::this_thread::sleep_for(std::chrono::milliseconds(42));
}