#include <vector>
#include <iterator>
#include <cstddef>

template <typename T>
class CustomContainer {
public:
    using value_type      = T;
    using reference       = T&;
    using const_reference = const T&;
    using pointer         = T*;
    using const_pointer   = const T*;

    using iterator       = typename std::vector<T>::iterator;
    using const_iterator = typename std::vector<T>::const_iterator;

    using size_type       = std::size_t;
    using difference_type = std::ptrdiff_t;

    iterator begin() noexcept { return data_.begin(); }
    iterator end()   noexcept { return data_.end();   }

    const_iterator begin() const noexcept { return data_.begin(); }
    const_iterator end()   const noexcept { return data_.end();   }

    const_iterator cbegin() const noexcept { return data_.cbegin(); }
    const_iterator cend()   const noexcept { return data_.cend();   }

    size_type size()  const noexcept { return data_.size();  }
    bool      empty() const noexcept { return data_.empty(); }

    void push_back(const T& value) { data_.push_back(value); }
    void push_back(T&& value)      { data_.push_back(std::move(value)); }

private:
    std::vector<T> data_;
};