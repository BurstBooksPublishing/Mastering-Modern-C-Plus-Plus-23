#include <iostream>
#include <thread>
#include <mutex>
#include <vector>

namespace {
    std::atomic<int> counter{0};          // lock-free, avoids contention
}

void increment(std::size_t iterations) {
    for (std::size_t i = 0; i < iterations; ++i) {
        ++counter;                        // atomic fetch-and-add
    }
}

int main() {
    constexpr std::size_t threads = 2;
    constexpr std::size_t iters   = 1000;

    std::vector<std::thread> pool;
    pool.reserve(threads);

    for (std::size_t i = 0; i < threads; ++i)
        pool.emplace_back(increment, iters);

    for (auto& t : pool) t.join();

    std::cout << "Counter: " << counter << '\n';
}