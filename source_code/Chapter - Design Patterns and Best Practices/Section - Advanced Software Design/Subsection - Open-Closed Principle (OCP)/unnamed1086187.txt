#include <memory>
#include <vector>
#include <stdexcept>

class Shape {
public:
    virtual ~Shape() = default;
    virtual double area() const noexcept = 0;
};

class Circle final : public Shape {
public:
    explicit Circle(double radius) {
        if (radius <= 0) throw std::invalid_argument("radius must be positive");
        radius_ = radius;
    }
    double area() const noexcept override { return 3.141592653589793 * radius_ * radius_; }
private:
    double radius_;
};

class Square final : public Shape {
public:
    explicit Square(double side) {
        if (side <= 0) throw std::invalid_argument("side must be positive");
        side_ = side;
    }
    double area() const noexcept override { return side_ * side_; }
private:
    double side_;
};

// Example usage
/*
int main() {
    std::vector<std::unique_ptr<Shape>> shapes;
    shapes.emplace_back(std::make_unique<Circle>(5.0));
    shapes.emplace_back(std::make_unique<Square>(4.0));
    for (const auto& s : shapes) { std::cout << s->area() << '\n'; }
}
*/