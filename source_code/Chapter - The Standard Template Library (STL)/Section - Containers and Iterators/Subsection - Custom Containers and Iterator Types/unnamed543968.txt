#include <vector>
#include <iterator>

template <typename T>
class CustomContainer {
public:
    using value_type             = T;
    using container_type         = std::vector<T>;
    using size_type              = typename container_type::size_type;

    using iterator               = typename container_type::iterator;
    using const_iterator         = typename container_type::const_iterator;
    using reverse_iterator       = typename container_type::reverse_iterator;
    using const_reverse_iterator = typename container_type::const_reverse_iterator;

    reverse_iterator rbegin() noexcept             { return data.rbegin(); }
    reverse_iterator rend()   noexcept             { return data.rend();   }
    const_reverse_iterator rbegin() const noexcept { return data.rbegin(); }
    const_reverse_iterator rend()   const noexcept { return data.rend();   }

    const_reverse_iterator crbegin() const noexcept { return data.crbegin(); }
    const_reverse_iterator crend()   const noexcept { return data.crend();   }

private:
    container_type data;
};