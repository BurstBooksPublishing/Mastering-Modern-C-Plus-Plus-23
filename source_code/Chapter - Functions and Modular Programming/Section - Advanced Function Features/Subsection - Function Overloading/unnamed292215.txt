#include <iostream>
#include <string>
#include <type_traits>

// Generic, type-safe printer; overloads for fundamental types are still allowed.
template <typename T>
void print(const T& value) {
    if constexpr (std::is_same_v<T, int>) {
        std::cout << "Integer: " << value << '\n';
    } else if constexpr (std::is_same_v<T, double>) {
        std::cout << "Double: " << value << '\n';
    } else if constexpr (std::is_same_v<T, std::string>) {
        std::cout << "String: " << value << '\n';
    } else {
        static_assert(std::is_same_v<T, int> || std::is_same_v<T, double> || std::is_same_v<T, std::string>,
                      "Unsupported type passed to print()");
    }
}

int main() {
    print(42);          // Integer
    print(3.14);        // Double
    print(std::string("Hello")); // String
}