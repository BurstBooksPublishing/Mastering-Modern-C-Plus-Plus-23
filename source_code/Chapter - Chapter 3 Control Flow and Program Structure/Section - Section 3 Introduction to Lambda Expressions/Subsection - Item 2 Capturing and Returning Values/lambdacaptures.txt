#include <vector>
#include <string>
#include <iostream>
#include <memory>
#include <utility>

// Returns a function that owns its own copy of the buffer.
auto make_buffer_processor(std::vector<int> buf) {
    return [buf = std::make_shared<std::vector<int>>(std::move(buf))]
           (int multiplier) noexcept -> std::size_t {
        for (auto& v : *buf) v *= multiplier;
        return buf->size();
    };
}

// Returns a function that reads from an immutable configuration string.
// The caller must keep the string alive.
auto make_config_reader(const std::string& config) {
    return [&config]() noexcept -> std::string {
        return config;
    };
}

int main() {
    std::vector<int> big(1'000'000, 42);
    auto proc = make_buffer_processor(std::move(big));
    std::cout << "processed size: " << proc(2) << '\n';

    const std::string cfg = "mode=fast";
    auto reader = make_config_reader(cfg);
    std::cout << "config: " << reader() << '\n';
}